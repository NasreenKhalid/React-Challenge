{"version":3,"sources":["Images/logohere.png","Components/AlbumCard.js","Components/Albums.js","Components/AlbumDetails.js","Menu/TopMenu.js","App.js","reportWebVitals.js","index.js"],"names":["ProblemCard","item","to","className","src","Logo","alt","title","user","ALL_ALBUMS","gql","Albums","useQuery","fetchPolicy","data","loading","error","networkStatus","NetworkStatus","albums","map","AlbumCard","id","ALBUM_DETAIL","AlbumDetails","variables","notifyOnNetworkStatusChange","refetch","style","display","flexFlow","name","city","TopMenu","logohere","placeholder","type","autoComplete","App","useState","collapse","setCollapse","menu","page","onClick","e","preventDefault","v","handleCollapse","icon","faThList","activeClassName","faIndustry","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95f128a8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logohere.3432485e.png\";","import {Link} from \"react-router-dom\";\nimport Logo from '../Images/logohere.png'\n\nfunction ProblemCard({item}){\n\n    return (\n        <Link\n            to={`/Album`}\n            className={\"card-margin align-left is-row is-card\"}\n        >\n            <div className=\"is-50\">\n                <div className=\"image-container\">\n                    <img className=\"card-logo\" src={Logo} alt=\"Logo\" />\n                </div>\n            </div>\n            <div className=\"is-50\">\n                <h3>{item.title}</h3>\n                <p>\n                    {item.user['name']} - {item.user['email']}\n                </p>\n                <p>\n                    {item.user['phone']} - {item.user['address']['city']}\n                </p>\n                <br />\n                <p>{item.user['company']['name']}</p>\n            </div>\n        </Link>\n    );\n}\n\nexport default ProblemCard\n","import React from 'react';\nimport AlbumCard from './AlbumCard'\nimport { useQuery, gql, NetworkStatus } from '@apollo/client';\n\nconst ALL_ALBUMS = gql`\nquery{\n albums{\n    data{\n      id\n      title\n      user{\n        name\n        email\n        address{\n          city\n        }\n        phone\n        company{\n          name\n        }\n      }\n      \n    }\n  }\n}\n`\n\nfunction Albums(){\n\n\n    //Passing query to useQuery hook to fetch data\n    const{data, loading, error, networkStatus} = useQuery(ALL_ALBUMS, {fetchPolicy: \"cache-and-network\"})\n\n\n    if (networkStatus === NetworkStatus['refetch'])\n        return 'Refetching!';\n    else if (loading)\n        return 'Loading..';\n    else if (error)\n        return `Error! ${error}`;\n    else if(data)\n        return(\n            <div className=\"is-scrollable-list\">\n                {data ? data.albums.data.map((item) => (\n                    <AlbumCard\n                        key={item.id}\n                        item={item}\n                    />\n                )) : 'Albums list undefined...' }\n            </div>\n        )\n}\n\nexport default Albums;","import React from 'react';\nimport {NetworkStatus, useQuery, gql} from \"@apollo/client\";\n\n\nconst ALBUM_DETAIL = gql`\nquery($id: ID!){\n album(id : $id){\n      id\n      title\n      user{\n        name\n        username\n        email\n        address{\n          city\n        }\n        phone\n        website\n        company{\n          name\n        }\n      }\n      \n    }\n}\n`;\n\nfunction AlbumDetails(){\n\n    //Pass the id to the Query to fetch details of the related Album\n    const id = null\n\n    const{data, loading, error, networkStatus} = useQuery(ALBUM_DETAIL,{\n        variables: {id},\n        fetchPolicy: 'cache-and-network',\n        notifyOnNetworkStatusChange: true,\n    })\n\n    if (networkStatus === NetworkStatus.refetch)\n        return 'Refetching!';\n    if (loading)\n        return 'Loading...';\n    if (error) {\n        return `Error! ${error}`;\n    }\n    if (data) {\n        return (\n            <div className={\"is-detail-Page\"}>\n                <div className=\"album-detailsHead align-left is-row is-card\"\n                     style={{display: 'flex', flexFlow: 'column'}}>\n                    <div className=\"is-row\">\n                        <div className=\"is-100\">\n                            <h3>{data['album'].title}</h3>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"album-detailsBody is-card\">\n                    <div className=\"album-outline-container\">\n                        <div className=\"album-outline\">\n                            <b>Name: </b> <span>{data['album']['user'].name}</span> <br/> <br/>\n                            <b>User name: </b> <span>{data['album']['user']['username']}</span><br/> <br/>\n                            <b>Email: </b> <span>{data['album']['user']['email']}</span><br/> <br/>\n                            <b>Phone: </b> <span>{data['album']['user']['phone']}</span><br/> <br/>\n                            <b>Address: </b> <span>{data['album']['user']['address'].city}</span><br/> <br/>\n                            <b>Website: </b> <span>{data['album']['user']['website']}</span><br/> <br/>\n                            <b>Company: </b> <span>{data['album']['user']['company'].name}</span><br/> <br/>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n\n    }\n\n\n}\n\nexport default AlbumDetails;","import React from 'react'\nimport logohere from '../Images/logohere.png'\n\nfunction TopMenu(){\n    return (\n        <div className=\"top-menu is-shadow-2\">\n            <div className=\"menu-logo-container\">\n                <img className=\"menu-logo\" src={logohere} alt=\"Logo\" />\n            </div>\n            <div>\n                <input\n                    className=\"search-field\"\n                    placeholder=\"Search here....\"\n                    type=\"search\"\n                    name=\"name\"\n                    autoComplete=\"off\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default TopMenu;","import './App.css';\nimport React, {useState} from 'react';\nimport Albums from './Components/Albums';\nimport AlbumDetails from './Components/AlbumDetails';\nimport TopMenu from './Menu/TopMenu';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faThList, faIndustry } from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n} from \"react-router-dom\";\n\nfunction App() {\n\n  //State toggles the navigation menu\n  const [collapse, setCollapse] = useState(false)\n\n  const handleCollapse =(e) =>{\n    e.preventDefault()\n    setCollapse(v => !v)\n  }\n\n  // apply CSS according to the width of the page\n  let menu = collapse\n      ? \"main-menu is-shadow-2 nav-is-closed\"\n      : \"main-menu is-shadow-2 nav-is-open\";\n  let page = collapse\n      ? \"is-sidePage page-navClosed\"\n      : \"is-sidePage page-navOpen\";\n\n  return (\n\n      // Navigation menu\n      <Router>\n        <div className=\"is-main is-100 is-row\">\n          <div className={menu}>\n            <div className=\"navigation\">\n              <div className=\"navigation-container\">\n                <div\n                    className=\"navigation-item\"\n                    onClick={(e)=>handleCollapse(e)}\n                >\n                  <div className=\"navigation-item__icon\">\n                    <FontAwesomeIcon icon={faThList} />\n                  </div>\n                  <span className=\"navigation-item__text\">Hide Menu</span>\n                </div>\n                <hr />\n                <NavLink to={\"/\"} activeClassName=\"navigation-item-is-active\">\n                  <div className=\"navigation-item white-link\">\n                    <div className=\"navigation-item__icon\">\n                      <FontAwesomeIcon icon={faIndustry} />\n                    </div>\n                    <span className=\"navigation-item__text\">Albums</span>\n                  </div>\n                </NavLink>\n              </div>\n            </div>\n          </div>\n\n\n          {/* Top menu of the page  */}\n          <TopMenu/>\n\n          {/* Main page to display information  where the page switch takes place*/}\n          <div className={page}>\n            <div className=\"is-pageBody\">\n              <div className=\"is-page-content\">\n                <Switch>\n                  <Route exact path=\"/\">\n                    <Albums/>\n                  </Route>\n                  <Route exact path=\"/Album\">\n                    <AlbumDetails/>\n                  </Route>\n                </Switch>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\n\n// GraphQl Url\nconst client = new ApolloClient({\n    uri: 'https://graphqlzero.almansi.me/api',\n    cache: new InMemoryCache()\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>, document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}